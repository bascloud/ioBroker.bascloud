{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.6.2\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from '@iobroker/adapter-core'\nimport axios from 'axios'\n\n// Load your modules here, e.g.:\n// import * as fs from \"fs\";\n\nconst bascloudUrl = 'https://api.bascloud.net'\n\nconst readingsWrite: {\n  [index: string]: {\n    localId: string\n    remoteId: string\n    intervalEnabled: boolean\n    interval: number\n    intervalUnit: 'm' | 'h' | 'd'\n    intervalFunction: 'last' | 'min' | 'max'\n    alwaysSend: boolean\n\n    funcInterval?: NodeJS.Timeout\n    lastValue?: number\n    lastValueTransmitted?: boolean\n  }\n} = {}\n\nconst readingsRead: {\n  [index: string]: {\n    localId: string\n    remoteId: string\n    unit: string\n    interval: number\n    intervalUnit: 'm' | 'h' | 'd'\n\n    funcInterval?: NodeJS.Timeout\n  }\n} = {}\n\nclass Bascloud extends utils.Adapter {\n  public constructor(options: Partial<utils.AdapterOptions> = {}) {\n    super({\n      ...options,\n      name: 'bascloud',\n    })\n    this.on('ready', this.onReady.bind(this))\n    this.on('stateChange', this.onStateChange.bind(this))\n    // this.on('objectChange', this.onObjectChange.bind(this));\n    // this.on('message', this.onMessage.bind(this));\n    this.on('unload', this.onUnload.bind(this))\n  }\n\n  /**\n   * Is called when databases are connected and adapter received configuration.\n   */\n  private async onReady(): Promise<void> {\n    // Initialize your adapter here\n    axios.defaults.timeout = 5000\n\n    // Subscribe to all write readings\n    if (this.config.readingsWrite) {\n      this.config.readingsWrite.forEach(async (reading) => {\n        readingsWrite[reading.localId] = reading\n        readingsWrite[reading.localId].lastValueTransmitted = true\n        let intervalTimeout = reading.interval * 1000 * 60 // default to minutes\n        if (reading.intervalUnit === 'h') {\n          intervalTimeout = intervalTimeout * 60\n        } else if (reading.intervalUnit === 'd') {\n          intervalTimeout = intervalTimeout * 60 * 24\n        }\n        readingsWrite[reading.localId].funcInterval = setInterval(\n          this.bascloudIntervalTransmit.bind(this, reading.localId),\n          intervalTimeout\n        )\n        this.subscribeForeignStates(reading.localId)\n      })\n    } else {\n      console.warn('No readingsWrite defined')\n    }\n\n    // Subscribe to all read readings\n    if (this.config.readingsRead) {\n      this.config.readingsRead.forEach(async (reading) => {\n        readingsRead[reading.localId] = reading\n        let intervalTimeout = reading.interval * 1000 * 60 // default to minutes\n        if (reading.intervalUnit === 'h') {\n          intervalTimeout = intervalTimeout * 60\n        } else if (reading.intervalUnit === 'd') {\n          intervalTimeout = intervalTimeout * 60 * 24\n        }\n\n        // Create state if it doesn't exist\n        await this.setObjectNotExistsAsync(reading.localId, {\n          type: 'state',\n          common: {\n            name: reading.localId,\n            type: 'number',\n            role: 'indicator',\n            read: true,\n            write: true,\n            unit: reading.unit,\n          },\n          native: {},\n        })\n\n        // Set interval to read from bascloud\n        this.log.debug(`setting interval for ${reading.localId}`)\n        this.bascloudRead(reading.localId)\n        readingsRead[reading.localId].funcInterval = setInterval(\n          this.bascloudRead.bind(this, reading.localId),\n          intervalTimeout\n        )\n      })\n    } else {\n      console.warn('No readingsRead defined')\n    }\n\n    if (this.config.sendOnStart) {\n      Object.keys(readingsWrite).forEach((key) => {\n        this.bascloudTransmitNoCache(key)\n      })\n    }\n  }\n\n  /**\n   * Is called when adapter shuts down - callback has to be called under any circumstances!\n   */\n  private onUnload(callback: () => void): void {\n    try {\n      // Here you must clear all timeouts or intervals that may still be active\n      Object.keys(readingsWrite).forEach((key) => {\n        if (readingsWrite[key].funcInterval)\n          clearInterval(readingsWrite[key].funcInterval)\n      })\n      callback()\n    } catch (e) {\n      callback()\n    }\n  }\n\n  // If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\n  // You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\n  // /**\n  //  * Is called if a subscribed object changes\n  //  */\n  // private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\n  // \tif (obj) {\n  // \t\t// The object was changed\n  // \t\tthis.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\n  // \t} else {\n  // \t\t// The object was deleted\n  // \t\tthis.log.info(`object ${id} deleted`);\n  // \t}\n  // }\n\n  /**\n   * Is called if a subscribed state changes\n   */\n  private onStateChange(\n    id: string,\n    state: ioBroker.State | null | undefined\n  ): void {\n    if (state) {\n      // The state was changed\n      this.log.debug(`state ${id} changed: ${state.val} (ack = ${state.ack})`)\n      if (!readingsWrite[id].intervalEnabled) {\n        this.bascloudTransmitValue(id, state.val as number)\n      } else {\n        this.bascloudSetCacheValue(id, state.val as number)\n      }\n    } else {\n      // The state was deleted\n      this.log.debug(`state ${id} deleted`)\n    }\n  }\n\n  // If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\n  // /**\n  //  * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\n  //  * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\n  //  */\n  // private onMessage(obj: ioBroker.Message): void {\n  // \tif (typeof obj === 'object' && obj.message) {\n  // \t\tif (obj.command === 'send') {\n  // \t\t\t// e.g. send email or pushover or whatever\n  // \t\t\tthis.log.info('send command');\n\n  // \t\t\t// Send response in callback if required\n  // \t\t\tif (obj.callback) this.sendTo(obj.from, obj.command, 'Message received', obj.callback);\n  // \t\t}\n  // \t}\n  // }\n\n  private bascloudRead(id: string): void {\n    this.log.debug(`reading from bascloud: ${id}`)\n    const reading = readingsRead[id]\n    const config = {\n      method: 'get',\n      maxBodyLength: Infinity,\n      url: `${bascloudUrl}/v2/tenants/${this.config.tenantId}/devices/${reading.remoteId}/readings?page[size]=1`,\n      headers: {\n        'Content-Type': 'application/vnd.api+json',\n        Authorization: `Bearer ${this.config.apiKey}`,\n      },\n    }\n    axios(config)\n      .then((res) => {\n        if (res.data.data.length > 0) {\n          this.log.debug('setting state from bascloud for id: ' + id)\n          const val = res.data.data[0].attributes.value\n          this.setState(id, val, true)\n        }\n      })\n      .catch((error) => {\n        this.log.error(`state ${id} failed to read from bascloud: ${error}`)\n      })\n  }\n\n  private bascloudSetCacheValue(id: string, val: number): void {\n    this.log.debug(`setting cache value ${id} to ${val}`)\n    const f = readingsWrite[id].intervalFunction\n    switch (f) {\n      case 'last':\n        readingsWrite[id].lastValue = val\n        break\n      case 'min':\n        if (readingsWrite[id].lastValue === undefined) {\n          readingsWrite[id].lastValue = val\n        } else {\n          readingsWrite[id].lastValue = Math.min(\n            readingsWrite[id].lastValue!,\n            val\n          )\n        }\n        break\n      case 'max':\n        if (readingsWrite[id].lastValue === undefined) {\n          readingsWrite[id].lastValue = val\n        } else {\n          readingsWrite[id].lastValue = Math.max(\n            readingsWrite[id].lastValue!,\n            val\n          )\n        }\n        break\n    }\n    readingsWrite[id].lastValueTransmitted = false\n  }\n\n  private bascloudIntervalTransmit(id: string): void {\n    this.log.debug(\n      `interval transmit for ${id}, alwaysSend: ${readingsWrite[id].alwaysSend}, lastValueTransmitted: ${readingsWrite[id].lastValueTransmitted}`\n    )\n    if (\n      !readingsWrite[id].alwaysSend &&\n      readingsWrite[id].lastValueTransmitted\n    ) {\n      return\n    }\n    if (readingsWrite[id].lastValue !== undefined) {\n      this.bascloudTransmitValue(id, readingsWrite[id].lastValue!)\n      readingsWrite[id].lastValueTransmitted = true\n    } else {\n      this.log.warn(`no cache value to transmit for ${id}`)\n      this.bascloudTransmitNoCache(id)\n    }\n  }\n\n  private bascloudTransmitNoCache(id: string): void {\n    // try to read from state\n    this.getForeignState(id, (err, state) => {\n      if (state) {\n        this.bascloudTransmitValue(id, state.val as number)\n        readingsWrite[id].lastValue = state.val as number // update cache so we donot need to read from state again\n        readingsWrite[id].lastValueTransmitted = true\n      } else {\n        this.log.error(`no value to transmit for ${id}`)\n      }\n    })\n  }\n\n  private bascloudTransmitValue(id: string, val: number): void {\n    const reading = this.config.readingsWrite.find(\n      (reading) => reading.localId === id\n    )\n\n    const data = JSON.stringify({\n      data: {\n        type: 'readings',\n        attributes: {\n          value: val,\n          timestamp: new Date().toISOString(),\n        },\n        relationships: {\n          device: {\n            data: {\n              type: 'devices',\n              id: reading?.remoteId,\n            },\n          },\n        },\n      },\n    })\n    const config = {\n      method: 'post',\n      maxBodyLength: Infinity,\n      url: `${bascloudUrl}/v2/tenants/${this.config.tenantId}/readings`,\n      headers: {\n        'Content-Type': 'application/vnd.api+json',\n        Authorization: `Bearer ${this.config.apiKey}`,\n      },\n      data: data,\n    }\n    axios(config)\n      .then((res) => {\n        this.log.debug(\n          `state ${id} sent to bascloud successfully: ${JSON.stringify(\n            res.data\n          )}`\n        )\n      })\n      .catch((error) => {\n        this.log.error(`state ${id} failed to send to bascloud: ${error}`)\n      })\n  }\n}\n\nif (require.main !== module) {\n  // Export the constructor in compact mode\n  module.exports = (options: Partial<utils.AdapterOptions> | undefined) =>\n    new Bascloud(options)\n} else {\n  // otherwise start the instance directly\n  ;(() => new Bascloud())()\n}\n"],
  "mappings": "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",
  "names": ["axios", "reading"]
}
